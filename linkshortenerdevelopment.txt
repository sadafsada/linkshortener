import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Base64;
import java.util.Scanner;

public class URLShortenerApp {

    private static final String PERSISTENCE_FILE = "url_mapping.dat";
    private static Map<String, String> urlMapping;
    private static Map<String, String> shortToLongMapping;

    public static void main(String[] args) {
        loadMappings();
     Scanner scanner = new Scanner(System.in);
    while (true) {
            System.out.println("1. Shorten URL");
            System.out.println("2. Expand URL");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter long URL: ");
                    String longURL = scanner.nextLine();
                    String shortURL = shortenURL(longURL);
                    System.out.println("Short URL: " + shortURL);
                    break;

                case 2:
                    System.out.print("Enter short URL: ");
                    String inputShortURL = scanner.nextLine();
                    String expandedURL = expandURL(inputShortURL);
                    if (expandedURL != null) {
                        System.out.println("Expanded URL: " + expandedURL);
                    } else {
                        System.out.println("Invalid short URL.");
                    }
                    break;

                case 3:
                    System.out.println("Exiting...");
                    saveMappings();
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }
  private static String shortenURL(String longURL) {
        if (urlMapping.containsKey(longURL)) {
            return urlMapping.get(longURL);
        }
     String shortURL = generateShortURL(longURL);
        urlMapping.put(longURL, shortURL);
        shortToLongMapping.put(shortURL, longURL);
        return shortURL;
    }
  private static String expandURL(String shortURL) {
        return shortToLongMapping.getOrDefault(shortURL, null);
    }
  private static String generateShortURL(String longURL) {
        int hashCode = longURL.hashCode();
        return Base64.getUrlEncoder().withoutPadding().encodeToString(Integer.toString(hashCode).getBytes()).substring(0, 6);
    }
  private static void saveMappings() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(PERSISTENCE_FILE))) {
            oos.writeObject(urlMapping);
            oos.writeObject(shortToLongMapping);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  @SuppressWarnings("unchecked")
    private static void loadMappings() {
        urlMapping = new HashMap<>();
        shortToLongMapping = new HashMap<>();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(PERSISTENCE_FILE))) {
            urlMapping = (Map<String, String>) ois.readObject();
            shortToLongMapping = (Map<String, String>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No previous mappings found, starting fresh.");
        }
    }
}
